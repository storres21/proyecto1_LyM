/*
Sofia Torres Ramirez - 202014872
Javier Andres Ramirez Silva - 201821781
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.until.HashMap;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	|   "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<T_MOVER:  "Move">
		| 	<T_TURNRIGHT: "TURNRIGHT">
		| 	<T_PONER: "Put">
		| 	<T_RECOGER: "Pick">
		|  < T_POP: "Pop" >
		

}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}

TOKEN :
{
		<BALLOONS:  "balloons" >
		|	<CHIPS:     "chips"  >	

}


TOKEN :
{
		<NUMBER: (<DIGIT>)+ >
		|  	<#DIGIT: (["0"-"9"])+ >
		<WORD: (< LETTER >)+ >
        |   <#LETTER: (["a"-"z"])+ >
}

TOKEN:/*Comandos*/
{
  < M_DEFVAR: "defvar" >
| < M_ASSIGN: "=" >
| < M_MOVE: "move" >
| < M_TURN: "turn" >
| < M_FACE: "face" >
| < M_PUT: "put" >
| < M_PICK: "pick" >
| < M_MOVEDIR: "move-dir" >
| < M_RUNDIRS: "run-dirs" >
| < M_MOVEFACE: "move-face" >
| < M_SKIP: "skip" >

}

TOKEN: /*estructuras de control*/
{
  < E_CONDITIONAL: "if" >
| < E_REPEAT: "loop" >
| < E_REPEATTIMES: "repeat" >
| < E_FUNCTIONDEFINITION: "defund" >
}

TOKEN: /*condiciones*/
{
  < C_FACING: "facing-p" >
| < C_PUT: "can-put-p" >
| < C_PICK: "can-pick-p" >
| < C_MOVE: "can-move-p" >
| < C_NOT: "not" >
}

TOKEN: /*direcciones*/
{
  < LEFT : ":left" >
| < RIGHT : ":right" >
| < AROUND : ":around" >
| < FRONT : ":front" >
| < BACK : ":back" >
}

TOKEN: /*coordenadas*/
{
  < NORTH: "north" >
| < SOUTH: "south" >
| < EAST: "east" >
| < WEST: "west" >
}



boolean line (StringBuffer sistema) :
	{	
		salida=new String();
		
	}
	 (	  instruction()      )+
	  {
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}

void instruction ():
{ }
{
  "("(command()|original_command()|e_control())")"
}

void original_command():
       {
         int x;
       }
       { 
		(
		   <T_TURNRIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		|  <T_MOVER>  "(" x=numero() ")" {world.moveForward(x);salida = "Command: Moveforward ";}  
		|  <T_PONER> "("  objetoPoner() ")"					  			
		|  <T_RECOGER> "("  objetoRecoger()  ")"	
	    |  < T_POP > "(" x=numero() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) "\n" 


	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}



void command() :
	{}
	{
		(
		   < M_DEFVAR > < WORD > < NUMBER >  
		|  < M_ASSIGN > < WORD > < NUMBER >  
		|  < M_MOVE > ( <NUMBER > | variable())					  			
		|  < M_TURN >  direction() 
		|  < M_FACE > ":" face_object() 
		|  < M_PUT > ":" put_object() 
		|  < M_PICK > ":" pick_object() 
		|  < M_MOVEDIR > movedir() 
		|  < M_RUNDIRS > list_rundirs() 
		|  < M_MOVEFACE > struct_mf() 
	    |  < M_SKIP >
		) 
}

void direction():
{}
{
  ( < LEFT >|< RIGHT >|< AROUND > )}

void face_object():
{}
{
  ( < NORTH >|< SOUTH >|< EAST >|< WEST > )
}

void put_object():
{}
	{
		  ( < CHIPS > ( < NUMERO > | variable() )
		| ( < BALLOONS > ( < NUMERO > | variable() ) 
    }

void pick_object():
{}
	{
		  ( < CHIPS > ( < NUMERO > | variable() )
		| ( < BALLOONS > ( < NUMERO > | variable () )	 
	}

void movedir():
{}
{
  ( ( < NUMERO > | variable() )  ( < FRONT >|< RIGHT >|< LEFT >|< BACK > ) )
}
void list_rundirs():
{ }
{
  ("["( < FRONT >|< RIGHT >|< LEFT >|< BACK > )+"]")
}    

void struct_mf():
{}
{
  ( ( < NUMERO > | variable() ) ( < NORTH >|< SOUTH >|< WEST >|< EAST >) )
}

void e_control() :
{}
{
  (
	   < E_CONDITIONAL > "(" condition() ")" ( instruction() )  ( instruction() )
	|  < E_REPEAT > "(" condition() ")" ( instruction() )
	|  < E_REPEATTIMES > ( < NUMBER > | variable() ) ( instruction() )
	|  < E_FUNCTIONDEFINITION > < WORD > "(" ( < NUMBER > | < WORD > | variable() )* ")" ( instruction() )+

void condition() :
{}
{
  (          < C_FACING > face_object()
    |  < C_PUT > put_object()
    |  < C_PICK > pick_object()
    |  < C_MOVE > ":" face_object()
    |  < C_NOT > condition()


	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	